import express from 'express';
import jsonServer from 'json-server';
import swaggerUi from 'swagger-ui-express';
import YAML from 'yamljs'
import cron from 'node-cron'
import { ping } from './ping.js'

const port = 3000;

// Create express app
const app = express();

// Create a JSON Server instance
const server = jsonServer.create();
const router = jsonServer.router('data/db.json');
const middlewares = jsonServer.defaults({ logger: false }); // Disable logging

server.use(middlewares);
server.use(router);

// Mount the JSON Server at /api
app.use('/api', server);

// set up Swagger UI in the root 
const swaggerDocument = YAML.load('./src/swagger.yaml')
app.use('/', swaggerUi.serve, swaggerUi.setup(swaggerDocument))

// Ping Redis every five seconds 
cron.schedule('*/5 * * * * *', async () => {    
    console.log(new Date(), await ping());
  });

// Start the combined server
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});

// Original code was generated by Chat-GPT 
/*
    import express from 'express';
    import { createClient } from 'redis';
    import jsonServer from 'json-server';
    import swaggerUi from 'swagger-ui-express';
    import swaggerDocument from './swagger.json';

    const client = createClient();
    const port = 3000;

    // Create a JSON Server instance
    const server = jsonServer.create();
    const router = jsonServer.router('db.json');
    const middlewares = jsonServer.defaults();

    // Middleware to check Redis cache before hitting JSON Server
    server.use((req, res, next) => {
        const key = req.url;
        client.get(key, (err, data) => {
            if (err) throw err;

            if (data !== null) {
                res.json(JSON.parse(data));
            } else {
                next();
            }
        });
    });

    server.use(middlewares);
    server.use(router);

    // Swagger UI setup
    const app = express();
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

    // Mount the JSON Server at /api
    app.use('/api', server);

    // Start the combined server
    app.listen(port, () => {
        console.log(`Server running on port ${port}`);
    });

    // Redis connection
    client.on('connect', () => {
        console.log('Connected to Redis');
    });

    // Example: Cache data in Redis
    client.set('/posts', JSON.stringify([{ "id": 1, "title": "Cached Post" }]));

    // Close Redis connection
    client.quit();    
*/