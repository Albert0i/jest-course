import { redisClient } from "./config/redisClient.js"

const DEFAULT_NAMESPACE = "cache"
const DEFAULT_STATUS = 'cacheStatus'
const DEFAULT_TTL = 60    // seconds 

function hisFetch(url, options) {
    return new Promise( async (resolve, reject) => {
      const value = await redisClient.get(`${DEFAULT_NAMESPACE}:${url}`)

      if (value) { 
          // cache hit 
          let json = JSON.parse(value)
          json[DEFAULT_STATUS] = 'hit'
          resolve(json) 
        }
      else {
        // cache miss 
        try {
          const response = await fetch(url, options)          

          if (!response.ok) {
            throw new Error('Network response was not ok');
          } else {
            let data = await response.json()
            await redisClient.set(`${DEFAULT_NAMESPACE}:${url}`, JSON.stringify(data), 'EX', DEFAULT_TTL)
            data[DEFAULT_STATUS] = 'miss'
            resolve(data) // Resolve the Promise with the retrieved data
          }
        } catch (error) {
          reject(error) // Reject the Promise with the error
        }
      }
    });
  } 

export { hisFetch }

/*
   crypto-js
   https://www.npmjs.com/package/crypto-js
*/

/* Original code was generated by Chat-GPT */
/*
function myFetch(url) {
  return new Promise((resolve, reject) => {
    fetch(url)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json(); // Parse the JSON data
      })
      .then(data => {
        resolve(data); // Resolve the Promise with the retrieved data
      })
      .catch(error => {
        reject(error); // Reject the Promise with the error
      });
  });
}

// Example of using the myFetch function
const apiUrl = 'https://jsonplaceholder.typicode.com/posts/1';

myFetch(apiUrl)
  .then(data => {
    console.log(data); // Log the retrieved data to the console
  })
  .catch(error => {
    console.error('There was a problem with your fetch operation:', error);
  });

*/